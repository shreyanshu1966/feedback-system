import React, { useState, useEffect, useRef } from 'react';
import { ChevronDown, Check, Lock, BookOpen, Code, Pencil, Clock, Flask } from 'lucide-react';

const SubjectSelector = ({ subjects, value, onChange, disabled = false }) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);
  
  // Close dropdown when clicking outside
  useEffect(() => {
    function handleClickOutside(event) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    }
    
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);
  
  const toggleDropdown = () => {
    if (disabled) return;
    setIsOpen(!isOpen);
  };
  
  const handleSelectSubject = (subjectId) => {
    if (disabled) return;
    // Create a synthetic event to match the onChange interface
    onChange({ target: { value: subjectId } });
    setIsOpen(false);
  };

  // Find the currently selected subject
  const selectedSubject = subjects.find(sub => sub.id === value);
  
  // Get icon based on subject
  const getSubjectIcon = (subjectId) => {
    switch(subjectId) {
      case 'math':
        return <BookOpen className="w-6 h-6 text-blue-500" />;
      case 'english':
        return <Pencil className="w-6 h-6 text-indigo-500" />;
      case 'coding':
        return <Code className="w-6 h-6 text-green-500" />;
      case 'history':
        return <Clock className="w-6 h-6 text-amber-500" />;
      case 'science':
        return <Flask className="w-6 h-6 text-purple-500" />;
      default:
        return <BookOpen className="w-6 h-6 text-gray-500" />;
    }
  };
  
  return (
    <div className="relative" ref={dropdownRef}>
      <label className="block text-sm font-medium mb-2 flex items-center">
        Select Subject
        {disabled && (
          <span className="ml-2 text-xs bg-gray-100 text-gray-600 px-2 py-0.5 rounded-full flex items-center">
            <Lock className="w-3 h-3 mr-1" /> Upload file first
          </span>
        )}
      </label>
      
      <button
        type="button"
        onClick={toggleDropdown}
        className={`w-full p-4 border rounded-lg flex items-center justify-between bg-white transition-all duration-300
          ${disabled 
            ? 'cursor-not-allowed bg-gray-50 border-gray-200' 
            : isOpen 
              ? 'ring-2 ring-blue-500 border-blue-500 shadow-md' 
              : 'border-gray-300 hover:bg-gray-50 hover:border-blue-300'}`}
        aria-haspopup="listbox"
        aria-expanded={isOpen}
        disabled={disabled}
      >
        <span className={`flex items-center ${!value ? 'text-gray-500' : 'text-gray-900 font-medium'}`}>
          {selectedSubject ? (
            <>
              <span className="w-10 h-10 flex items-center justify-center mr-3 bg-blue-50 rounded-full">
                {getSubjectIcon(selectedSubject.id)}
              </span>
              {selectedSubject.name}
            </>
          ) : 'Choose a subject...'}
        </span>
        <ChevronDown className={`w-5 h-5 text-gray-400 transition-transform duration-300 ${isOpen ? 'transform rotate-180' : ''}`} />
      </button>
      
      {isOpen && !disabled && (
        <div className="absolute z-10 mt-2 w-full bg-white border border-gray-300 rounded-lg shadow-xl max-h-80 overflow-auto animate-fadeIn">
          <div className="p-3 border-b border-gray-100 bg-gray-50">
            <p className="text-sm text-gray-700 font-medium">Select a subject</p>
            <p className="text-xs text-gray-500 mt-1">Feedback will be tailored to the selected subject</p>
          </div>
          <ul className="py-2" role="listbox">
            {subjects.map((sub) => (
              <li 
                key={sub.id}
                onClick={() => handleSelectSubject(sub.id)}
                className={`px-4 py-3 cursor-pointer flex items-center justify-between transition-all duration-200
                  ${value === sub.id 
                    ? 'bg-blue-50 text-blue-700' 
                    : 'hover:bg-gray-50'}`}
                role="option"
                aria-selected={value === sub.id}
              >
                <div className="flex items-center">
                  <span className={`w-10 h-10 flex items-center justify-center mr-3 rounded-full ${value === sub.id ? 'bg-blue-100' : 'bg-gray-100'}`}>
                    {getSubjectIcon(sub.id)}
                  </span>
                  <div>
                    <span className={value === sub.id ? 'font-medium' : ''}>{sub.name}</span>
                    <p className="text-xs text-gray-500 mt-1 max-w-xs truncate">{sub.criteria.join(' â€¢ ')}</p>
                  </div>
                </div>
                {value === sub.id && <Check className="w-5 h-5 text-blue-600 ml-2" />}
              </li>
            ))}
          </ul>
        </div>
      )}
      
      <style jsx>{`
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(-8px); }
          to { opacity: 1; transform: translateY(0); }
        }
        .animate-fadeIn {
          animation: fadeIn 0.2s ease-out forwards;
        }
      `}</style>
    </div>
  );
};

export default SubjectSelector;
